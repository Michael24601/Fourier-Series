/******************************************************************************
 * FourierSeries.h
 * A Fourier series in this context is an array of vectors, or circles,
 * where the base of each vector is the end of the last, and where each
 * vector spins at increasing speeds alternating between negative and
 * positive, with the tip of the last one drawing out the path specified
 * by some function f(t), which in our case, is the parametric piece-wise
 * function of all the Bezier Curves generated by the svg file.
 * When the circle with speed 1 (and -1) complete a full turn, in the time
 * between 0 and the end interval, the image will have just been done.
 * The fourier series function is periodic, so it always goes back to the
 * first point in the image when done. If the image isn't a loop, the fourier
 * series will just cut across back to the beginning instantly (same frame).
 * This is mostly a utility/helper class, so most functions have to be called
 * manually, and used in order one after the other. As such, there are no
 * getters and setters, only public functions, and no member variables.
******************************************************************************/

#ifndef FOURIER_SERIES_H
#define FOURIER_SERIES_H

#include <iostream>
#include <string>
#include <fstream>
#include <vector>
#include <sstream>
#include <algorithm>
#include <limits>
#include "BezierCurveVector.h"

namespace fs{

    class FourierSeries{
    public:

        // No arg constructor
        FourierSeries();

        /**********************************************************************
         * This function loads an svg file, and extracts the first svg path
         * element if it exists. Returns the path starting with M and ending
         * with z if it exists, or an empty string otherwise.
        **********************************************************************/
        std::string parseSVG(const std::string& filePath) const;

        /**********************************************************************
         * This function returns a vector of vectors of points, where each
         * vector contains the start, end, and control points of a bezier
         * curve in the supplied path data, which, in an svg file, is made
         * up of consecutive bezier curves, where the end point of a curve
         * is the start of another. There are multiple types of curves and
         * commands used in an svg file, including M, for the initial point,
         * L for a line, Q and C for quadratic and cubic curves, and z, for
         * the end of the curve back at the start (forming a loop).
        **********************************************************************/
        std::vector<std::vector<Point>> parseSVGPath(
            const std::string& pathData
        ) const;        
        
        /**********************************************************************
         * Moves the points so that the image fits in the smallest possible
         * square centered at the origin. This helps in case the image was
         * draw in a corner. 
        **********************************************************************/
        void movePointsToMinimizeDistance(
            std::vector<std::vector<Point>>& points
        ) const;

        /**********************************************************************
         * Returns the further point from the origin (be it along the x or y
         * axis). Used in order to scale the image to fit into the canvas.
        **********************************************************************/
        real findMaxAbsolutePoint(
            const std::vector<std::vector<Point>>& points
        ) const;

        /**********************************************************************
         * Scales all of the points so that they fit well in the canvas. The
         * size parameter specifies the size of the canvas.
        **********************************************************************/
        void scalePoints(std::vector<std::vector<Point>>& points,
            real size) const;

        /**********************************************************************
         * Given a vector of vectors of points, where each vector correpsonds
         * to the points defining a bezier curve, and the point at the end of
         * each vector is expected to be the point at the start of the next,
         * this function returns the a bezierCurveVector object compiling all
         * the mentioned bezier curves.
        **********************************************************************/ 
        BezierCurveVector generateBezierCurveVector(
            std::vector<std::vector<Point>> points
        ) const;
      
        /**********************************************************************
         * Given a bezier curve vector, integrates it (between the 0 and the
         * end interval where each individual bezier curve gets an equal slice
         * of the interval and their results are summed) and returns an array
         * of complex numbers designating the circles generated in order
         * to draw the image specified by the path to which the points belong
         * (in essence, the Fourier series).
         * Each circle contains a vector that acts as the origin of the next
         * vector in the array. The vectors each spin at a speed of 0, 1, -1,
         * 2, -2, etc... and their initial angle and magnitude are specified
         * using the complex numbers.
         * n is the number of circles, dt the interval size used integrating
         * (smaller is more accurate).
        **********************************************************************/ 
        std::vector<ComplexNumber> generateCircles(real dt, int n,
            const BezierCurveVector& h) const;
    };
}


#endif
