let defaultAnimationTime = 1000; // The time it takes for the first vector to make a full rotation by default
let animationTime = 10000; // In milliseconds
// Based on the two above values, with deltaT < 10000, every frame, the first vector is rotated
// 2pi * deltaT * (defaultAnimationTime / animationTime) / defaultAnimationTime

let convertStringtoPoints = (string) =>{
    let array = string.split(' ');
    let output = {points : [], vectors : []};
    for(let i = 0; i < array.length - 1; i+=2){
        output.points.push({x: parseInt(array[i]), y: parseInt(array[i+1])});
        console.log(output.points[i]);
        if(i != 0){
            output.vectors.push({x1 : output.points[i-1].x, y1: output.points[i-1].y,
                x2 : output.points[i].x, y2: output.points[i].y})
        }
    }
    return output;
} 

let loadCircles = (two, points) => {
    // All circles
    let circles = [];
    let sum = {x : 0, y : 0};
    for(let i = 0; i < points.length; i++){
        let radius = Math.pow((points[i].x * points[i].x) + (points[i].y * points[i].y), 0.5);
        let c = two.makeCircle(sum.x + 500, sum.y + 500, radius);
        c.linewidth = 0.5;
        c.fill = "transparent";
        circles.push(c);
        sum.x += points[i].x;
        sum.y += points[i].y;
    }

    return circles;
}

let loadVectors = (two, points) => {
    // All circles
    let vectors = [];
    let sum = {x : 0, y : 0};
    for(let i = 0; i < points.length; i++){
        let x1 = sum.x;
        let y1 = sum.y;
        let x2 = sum.x + points[i].x;
        let y2 = sum.y + points[i].y;

        let length = Math.pow(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2), 0.5);
        let l = two.makeArrow(x1 + 500, y1 + 500, x2 + 500, y2 + 500, length/10);
        l.linewidth = 0.5;
        l.stroke = "red";
        vectors.push(l);
        sum.x += points[i].x;
        sum.y += points[i].y;
    }

    return vectors;
}

let rotateVector = (vector, speed, deltaT) => {

    let theta = 2 * Math.PI * speed * deltaT * (defaultAnimationTime / animationTime) / defaultAnimationTime;

    let cs = Math.cos(theta);
    let sn = Math.sin(theta);

    let x = vector.x2 - vector.x1;
    let y = vector.y2 - vector.y1;

    let newX = x * cs - y * sn;
    let newY = x * sn + y * cs;

    let shift = {x : newX - x, y : newY - y};

    return shift;
}

let animate = () => {

}

var elem = document.getElementById('drawing-area');

var two = new Two({ fitted: true }).appendTo(elem);

two.width = 1000;
two.height = 1000;

var rect = two.makeRectangle(150, 80, 200, 100);
rect.stroke = 'orange';
rect.linewidth = 10;

let complexNumbers = "-36.546025 7.243988 146.389316 70.696805 31.745098 39.115481 -73.332714 97.737113 -28.926288 20.679157 -43.621134 -18.380664 -67.276478 16.483859 -10.259796 8.767757 14.177603 30.589321 9.049170 5.780092 2.824795 1.201884 -37.524932 1.286286 13.316957 5.496419 7.411468 -44.451211 -1.866481 -5.696793 11.781667 -14.372068 9.010207 10.294394 12.817325 -12.827389 1.005747 -4.716330 -1.111471 -1.553342 -9.171195 21.555118 -1.162507 -7.221777 -1.521086 15.543677 0.581792 3.981840 -5.464867 7.048614 7.193875 -2.764000 -1.543805 11.138125 -1.018171 7.599568 0.799251 -8.178348 0.274315 -0.047022 -0.617807 4.325352 -5.166893 -0.064768 -0.518612 -5.735941 0.273876 -5.266331 2.606952 -0.719731 1.238526 6.712909 1.787992 3.879955 1.664482 3.156358 -5.091657 1.058286 3.667512 0.218266 -1.066840 8.889877 1.842001 1.318087 0.588584 1.858319 3.156539 -0.950057 -0.474997 -0.954456 0.135486 2.633605 0.014310 -1.725966 -0.370031 3.708956 2.599541 -5.673077 -1.829517 -0.001314 0.693710 -0.719779 -2.685724 -3.373817 3.246501 1.168679 0.423487 -3.115527 -1.414716 3.375615 -5.765583 2.698680 -0.169701 3.317175 5.483567 2.471922 -2.360522 1.192808 1.627338 0.314163 1.164098 -2.913128 1.283284 1.901183 6.780053 -1.276188 -1.962638 -0.566909 -3.492963 1.112200 -0.507960 -0.336884 1.952567 -0.585904 -0.130714 -1.307288 0.593370 -1.491980 -0.488791 -0.942460 0.797877 1.533336 1.018190 -0.176957 0.506525 1.870240 1.860572 0.829269 -0.654333 0.204231 3.282826 -1.228526 -0.635432 0.189183 -1.690769 -1.560599 -0.176322 -0.645144 -2.394591 2.653842 -2.055994 -0.748060 -2.347385 1.409507 0.022941 -2.258649 -0.140700 -2.033639 0.059088 1.996708 -2.624611 -1.152738 1.438245 -0.089288 -0.583690 -0.084736 -1.521645 2.358911 1.255835 2.546294 -1.717674 -0.078188 1.138903 -1.479378 0.627609 -1.042902 -2.640687 0.040530 0.608924 -2.187322 0.871475 1.499406 0.366570 0.533003 -0.136725 -1.308915 -1.893834 0.792683 -1.871837 1.430545 0.709913 -1.559465 0.760917 0.488408 -1.161097 2.101735 1.413423 0.101521 0.218035 -1.607407 -0.273710 0.386447 0.507478 -0.917604 0.563038 1.959498 0.081106 1.145896 1.446446 0.294238 -2.244011 -1.235047 -1.082089 0.640244 0.906840 -2.251980 -0.929906 0.595688 0.719313 0.560231 -0.166047 0.267937 -0.739091 1.048309 -0.232362 0.597460 -0.357868 -0.612997 0.871545 -0.203291 0.132311 -1.382240 1.071624 0.055708 0.348695 -0.063456 -1.309863 0.273754 0.249723 -1.652265 0.060675 0.654410 0.143487 0.523123 -0.880897 0.073567 -0.576188 -0.218234 0.844178 0.768794 0.195517 -0.987570 0.223299 -0.506770 0.013859 -0.066718 -0.661742 -0.325163 1.119817 0.637601 1.026472 1.000646 -0.673357 -0.453514 0.763671 -0.123417 0.305067 -1.326093 0.082283 -0.636701 0.678966 -0.465208 -0.600021 -0.066972 0.133572 0.918157 0.057394 0.337418 0.174837 0.028836 0.437443 0.233960 0.167595 -0.012739 0.280984 0.634276 1.046959 -0.051795 0.856161 -0.146129 -0.424253 0.580581 0.908080 -0.239164 0.021034 -0.202951 -0.274987 -0.459222 1.022474 -0.818542 -0.662015 0.056905 -0.060450 0.441281 0.245610 0.028397 -0.461467 0.665255 -0.235126 -0.128690 0.065920 0.241211 -0.009271 -0.038463 0.766579 0.626995 -0.088980 -0.107774 0.127139 -0.132561 0.368660 0.517205 0.088015 -0.524073 -0.498803 0.545375 -0.030773 -0.224540 0.819349 -0.709701 -0.097785 0.207278 -0.863801 -0.750737 -0.011641 -0.243418 -0.246790 -0.077591 0.090036 0.146078 -0.213176 0.132459 0.003568 0.271583 0.287802 0.522740 0.060061 0.025737 -0.066424 -0.007169 -0.479067 -0.103174 0.019623 0.212195 -0.678772 -0.043092 -0.150022 -0.268367 -0.751497 -0.449717 -0.534249 -0.010917 -0.091720 -0.432688 0.063954 -0.265787 0.125961 -0.046441 -0.203836 0.294407 0.122297 -0.083716 0.500159 -0.298942 0.494046 0.187713 0.536742 0.072858 0.289741 0.417893 -0.160172 -0.099107 -0.114909 -0.206230 -0.454472 -0.032126 -0.295370 -0.143912 0.174955 -0.430134 -0.329165 -0.133879 0.392665 -0.006718 -0.086556 0.012270 -0.069956 -0.112411 0.087840 0.312130 -0.339222 0.017308 -0.075100 -0.068859 -0.048568 0.550179 0.071735 -0.259527 -0.100602 -0.016789 0.502170 0.077976 -0.002923 0.169111 -0.208880 -0.076854 -0.156970 -0.173414 -0.372324 0.292958 -0.065096 -0.240186 0.431993 -0.169138 0.132001 0.102790 -0.184382 -0.326233 -0.284432 0.112138 -0.112056 0.107239 0.304554 -0.237215 -0.099415 -0.027347 -0.201197 0.278204 0.000095 -0.105265 -0.193261 0.042492 0.062906 0.369535 -0.009926 0.086925 0.317444 0.228744 -0.188731 0.496993 -0.225797 -0.445136 -0.196980 0.002648 -0.032831 -0.376860 0.122021 -0.403002 0.169289 -0.047671 -0.411093 -0.105648 -0.191253 0.206351 0.346124 0.311118 0.047793 0.154481 0.031292 -0.029855 0.257091 -0.058640 -0.218906 0.131793 0.038568 0.124890 -0.048612 0.109203 -0.170732 0.150274 0.001944 -0.023734 -0.076608 -0.058583 -0.207670 -0.039645 0.202443 -0.092157 -0.072933 -0.174122 0.153160 0.212370 -0.085535 0.110909 -0.475433 -0.147148 -0.148293 -0.016646 -0.037793 -0.152915 0.230984 0.035398 -0.262104 -0.127495 -0.111908 -0.212199 -0.159620 0.360565 0.034425 -0.281870 -0.145563 0.133258 0.058661 0.436172 0.056909 0.104890 -0.167112 0.029588 -0.133123 -0.055948 -0.347861 -0.008333 -0.041362 -0.330464 -0.164431 -0.055006 -0.139278 0.038225 0.041106 -0.046973 0.112616 -0.116423 0.085793 -0.024118 -0.239321 -0.141830 0.004045 0.044763 0.072250 -0.102161 0.088284 0.124376 0.059027 -0.083655 0.145124 0.358227 -0.040563 -0.299605 -0.127870 0.060544 -0.243985 -0.138055 -0.147746 0.042409 0.027356 0.011168 -0.328461 0.152883 -0.134722 0.138151 -0.028033 0.203625 -0.054531 -0.119411 0.189658 -0.222034 0.245355 -0.057698 0.085815 -0.110756 0.039195 -0.143916 0.042113 -0.230168 -0.106182 0.040938 0.129481 0.118028 -0.035379 -0.263597 0.171396 0.052620 0.052143 -0.031559 -0.057142 -0.123009 -0.084721 0.076409 0.023381 -0.240573 -0.063168 0.097669 -0.027660 -0.021172 0.182408 -0.005512 0.238895 0.107201 -0.067743 -0.127465 0.120366 0.054334 -0.183287 -0.066740 -0.028587 -0.032747 0.010113 -0.040456 -0.039852 -0.035179 0.002539 -0.012425 0.164694 -0.222387 0.102646 0.194853 -0.059649 -0.065250 -0.111858 -0.052948 0.012323 -0.045421 0.010724 0.152571 0.133092 -0.006686 0.228026 0.078939 0.014353 0.081127 0.155711 -0.072925 0.010078 -0.046679 -0.115052 0.184101 0.181786 0.004344 -0.145411 -0.043731 0.066664 0.072215 -0.002424 -0.081327 -0.037062 -0.171378 0.329804 0.061854 0.047365 0.016763 0.158373 0.250325 0.202157 0.005032 0.032052 0.147547 0.063477 -0.056575 0.075631 -0.114383 0.018517 -0.065714 0.061670 0.176403 -0.095522 0.089317 -0.083177 0.031896 0.143778 0.009866 -0.113083 -0.028015 0.010552 -0.160642 -0.037098 -0.149697 0.019014 -0.165656 0.230919 0.239350 -0.031490 -0.166606 -0.018840 0.145427 -0.044915 0.126518 -0.081654 0.033353 0.083289 0.068719 -0.048552 -0.048886 0.001000 0.008315 -0.054630 0.016397 -0.199372 -0.198937 -0.101017 0.094700 -0.061860 0.086152 0.057152 0.161092 0.038774 -0.036469 -0.263186 -0.087921 -0.067103 -0.201182 0.044699 0.018264 -0.036078 -0.030856 0.178657 0.036194 0.080580 0.300588 0.062042 0.101370 -0.062746 -0.078329 -0.066269 -0.168917 0.164955 0.139720 0.056957 -0.044739 0.115938 -0.058474 0.189939 -0.008399 -0.031913 0.018569 -0.052285 -0.183364 0.034614 -0.126227 0.005162 0.079797 0.141467 -0.084889 0.103643 0.047044 0.030147 0.059557 0.021831 -0.031465 0.007072 0.115277 0.079561 -0.011979 0.000791 0.074746 0.072191 -0.080453 0.018770 0.057726 -0.106945 0.027525 -0.029265 -0.172973 -0.089684 0.072882 0.005886 -0.086535 0.119557 0.010424 -0.057260 -0.038941 0.006703 0.074777 -0.005196 -0.151086 -0.071600 0.037419 -0.008054 -0.021813 0.125763 0.136026 -0.036159 0.063427 0.021258 0.037268 0.004063 0.024790 -0.048026 0.088675 0.022588 -0.038846 0.002684 0.040010 -0.081106 -0.054383 -0.047504 -0.068748 0.040408 -0.088541 0.073867 0.046516 -0.009147 -0.035471 0.106949 -0.003966 0.064255 0.043459 0.040745 0.093069 0.012903 0.056444 -0.030323 -0.047787 0.021571 0.129173 -0.083890 -0.015211 -0.064015 0.096885 0.066581 -0.093609 -0.097624 0.076169 -0.054796 0.064772 0.084823 -0.027417 -0.065119 0.122693 -0.035680 -0.070103 -0.036293 -0.104208 -0.040649 0.008317 0.069944 0.052897 -0.053756 0.112942 0.007014 0.022597 -0.043088 -0.003764 -0.083923 0.000513 -0.000736 0.045996 0.037686 0.079129 -0.017731 0.024144 -0.012864 0.064304 0.014781 0.014616 -0.030213 0.080442 -0.027222 -0.035283 -0.011744 -0.029874 0.045670 -0.041945 -0.005215 0.052558 0.014023 -0.022693 0.024689 0.040455 -0.008864 0.010021 0.012819 -0.086578 -0.029945 0.109653 0.011531 0.008494 -0.011481 0.058403 -0.086067 -0.074077 0.030047 0.131306 -0.014957 -0.103174 -0.060880 0.001992 0.094255 -0.082960 0.029458 0.111717 -0.044649 -0.007260 0.028198 -0.031744 -0.026919 -0.164757 -0.022402 -0.009104 -0.106120 -0.077042 -0.025628 0.117385 -0.007252 -0.049856 -0.029467 0.144551 0.006848 -0.046828 -0.155215 0.018788 -0.105672 -0.071724 -0.086397 0.044182 -0.101075 0.215383 0.079985 0.070600 0.277167 0.064788 -0.074937 0.037794 -0.060922 0.024098 0.298594 0.174060 0.096705 0.071918 -0.134856 0.118848 -0.022225 0.045111 -0.055644 -0.039875 -0.059273 0.043040 -0.015471 0.032522 0.078998 -0.007973 0.056175 0.006938 0.041338 0.005263 -0.044729 -0.028735 0.048843 0.023228 0.038508 -0.060419 -0.046050 0.014755 0.029308 -0.034612 0.043419 -0.012356 -0.007936 -0.006276 -0.015389 0.039995 -0.003524 0.041340 -0.014418 0.009921 0.001487 -0.013864 -0.003969 -0.020923 -0.003075 0.021325 -0.007933 -0.000017 -0.067499 0.027020 -0.012365 -0.002794 -0.037431 -0.018905 -0.046097 0.036865 -0.045028 -0.001152 0.013657 -0.005806 -0.040404 0.030123 -0.032053 -0.011141 0.003840 0.036999";

let {points, vectors} = convertStringtoPoints(complexNumbers);

let circles = loadCircles(two, points);
let arrows = loadVectors(two, points);

let timeSum = 0;

two.bind("update", (frameCount) => {

    if(frameCount < animationTime){
        // Animation goes here

    }
    else{
        two.playing = false;
    }

    timeSum += two.timeDelta;
  })
  .play();

two.update();
